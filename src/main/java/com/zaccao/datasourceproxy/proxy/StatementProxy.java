package com.zaccao.datasourceproxy.proxy;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;


public class StatementProxy <T extends Statement> extends AbstractStatementProxy<T>{

    public StatementProxy(AbstractConnectionProxy connectionWrapper, T targetStatement, String targetSQL)
            throws SQLException {
        super(connectionWrapper, targetStatement, targetSQL);
    }
    public StatementProxy(AbstractConnectionProxy connectionWrapper, T targetStatement) throws SQLException {
        this(connectionWrapper, targetStatement, null);
    }

    @Override
    public ConnectionProxy getConnectionProxy() {
        return (ConnectionProxy) super.getConnectionProxy();
    }


    //下面都是SQL执行的方法，我们可以在执行之前先对SQL做修改，然后再执行
    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return null;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return 0;
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        return false;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return 0;
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return 0;
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return 0;
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return false;
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return false;
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return false;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        super.addBatch(sql);
    }

    @Override
    public int[] executeBatch() throws SQLException {
        return super.executeBatch();
    }
}
